[{"E:\\workspace\\react-admin\\src\\index.js":"1","E:\\workspace\\react-admin\\src\\App.js":"2","E:\\workspace\\react-admin\\src\\pages\\About\\index.js":"3","E:\\workspace\\react-admin\\src\\pages\\Home\\index.js":"4","E:\\workspace\\react-admin\\src\\pages\\Login\\index.js":"5","E:\\workspace\\react-admin\\src\\pages\\Login\\LoginForm.js":"6","E:\\workspace\\react-admin\\src\\pages\\Login\\RegisterForm.js":"7","E:\\workspace\\react-admin\\src\\api\\account.js":"8","E:\\workspace\\react-admin\\src\\utils\\request.js":"9"},{"size":158,"mtime":1609579377560,"results":"10","hashOfConfig":"11"},{"size":566,"mtime":1609578904831,"results":"12","hashOfConfig":"11"},{"size":220,"mtime":1609469272901,"results":"13","hashOfConfig":"11"},{"size":361,"mtime":1609517873863,"results":"14","hashOfConfig":"11"},{"size":847,"mtime":1609588579860,"results":"15","hashOfConfig":"11"},{"size":2828,"mtime":1609600917400,"results":"16","hashOfConfig":"11"},{"size":2949,"mtime":1609597348877,"results":"17","hashOfConfig":"11"},{"size":222,"mtime":1609600515510,"results":"18","hashOfConfig":"11"},{"size":666,"mtime":1609600567814,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"14c9oag",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"E:\\workspace\\react-admin\\src\\index.js",[],["42","43"],"E:\\workspace\\react-admin\\src\\App.js",[],"E:\\workspace\\react-admin\\src\\pages\\About\\index.js",[],"E:\\workspace\\react-admin\\src\\pages\\Home\\index.js",["44"],"import React, {Component} from 'react';\r\nimport './index.scss'\r\nimport { Button } from \"antd\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <a>home</a>\r\n        <Button type=\"primary\">按钮</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","E:\\workspace\\react-admin\\src\\pages\\Login\\index.js",["45"],"import react, { Component } from \"react\";\r\nimport \"./index.scss\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            formType: 'login'\r\n        };\r\n    }\r\n\r\n    toggleForm = (type) => {\r\n        this.setState({\r\n            formType: type\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-wrap\">\r\n                <div>\r\n                    { \r\n                        this.state.formType === 'login' \r\n                        ? <LoginForm toggleForm={ this.toggleForm } /> \r\n                        : <RegisterForm toggleForm={ this.toggleForm } /> \r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    } \r\n\r\n}\r\n\r\nexport default Login;","E:\\workspace\\react-admin\\src\\pages\\Login\\LoginForm.js",["46","47"],"E:\\workspace\\react-admin\\src\\pages\\Login\\RegisterForm.js",["48"],"import react, { Component, Fragment } from \"react\";\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nclass RegisterForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {};\r\n    }\r\n\r\n    onFinish = (values) => {\r\n        console.log(values);\r\n    }\r\n\r\n    toggleForm = ()=> {\r\n        this.props.toggleForm('login');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"form-header\">\r\n                    <h4>注册</h4>\r\n                    <span onClick={ this.toggleForm }>登录</span>\r\n                </div>\r\n                <div className=\"form-content\">\r\n                <Form\r\n                    name=\"normal_login\"\r\n                    className=\"login-form\"\r\n                    initialValues={{\r\n                        remember: true,\r\n                    }}\r\n                    onFinish={this.onFinish}\r\n                >\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        rules={[{ required: true, message: '请输入用户名!', }, ]}\r\n                    >\r\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"用户名\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: '请输入密码!', },]}\r\n                    >\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"密码\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"repassword\"\r\n                        rules={\r\n                            [\r\n                                { required: true, message: '请输入密码!'},\r\n                                ({ getFieldValue }) => ({\r\n                                    validator(rule, value) {\r\n                                      if (!value || getFieldValue('password') === value) {\r\n                                        return Promise.resolve();\r\n                                      }\r\n                        \r\n                                      return Promise.reject('输入两次密码不一样!');\r\n                                    },\r\n                                  }),\r\n                            ]\r\n                        }\r\n                    >\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"重复密码\" />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" className=\"login-form-button\" block>注册</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    } \r\n\r\n}\r\n\r\nexport default RegisterForm;","E:\\workspace\\react-admin\\src\\api\\account.js",[],"E:\\workspace\\react-admin\\src\\utils\\request.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":14,"column":9,"nodeType":"55","endLine":14,"endColumn":12},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":13},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":13},{"ruleId":"56","severity":1,"message":"60","line":2,"column":31,"nodeType":"58","messageId":"59","endLine":2,"endColumn":39},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":13},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","no-global-assign","no-unsafe-negation"]