[{"E:\\workspace\\react-admin\\src\\index.js":"1","E:\\workspace\\react-admin\\src\\App.js":"2","E:\\workspace\\react-admin\\src\\pages\\About\\index.js":"3","E:\\workspace\\react-admin\\src\\pages\\Home\\index.js":"4","E:\\workspace\\react-admin\\src\\pages\\Login\\index.js":"5","E:\\workspace\\react-admin\\src\\pages\\Login\\LoginForm.js":"6","E:\\workspace\\react-admin\\src\\pages\\Login\\RegisterForm.js":"7","E:\\workspace\\react-admin\\src\\api\\account.js":"8","E:\\workspace\\react-admin\\src\\utils\\request.js":"9","E:\\workspace\\react-admin\\src\\components\\code\\index.js":"10","E:\\workspace\\react-admin\\src\\pages\\Index\\index.js":"11","E:\\workspace\\react-admin\\src\\pages\\Index\\components\\Aside.js":"12","E:\\workspace\\react-admin\\src\\utils\\session.js":"13","E:\\workspace\\react-admin\\src\\components\\SecurityRouter\\index.js":"14","E:\\workspace\\react-admin\\src\\router\\index.js":"15","E:\\workspace\\react-admin\\src\\pages\\Index\\components\\Content.js":"16"},{"size":158,"mtime":1609579377560,"results":"17","hashOfConfig":"18"},{"size":614,"mtime":1609846602956,"results":"19","hashOfConfig":"18"},{"size":220,"mtime":1609469272901,"results":"20","hashOfConfig":"18"},{"size":361,"mtime":1609517873863,"results":"21","hashOfConfig":"18"},{"size":847,"mtime":1609588579860,"results":"22","hashOfConfig":"18"},{"size":4199,"mtime":1609845283181,"results":"23","hashOfConfig":"18"},{"size":4730,"mtime":1609769176029,"results":"24","hashOfConfig":"18"},{"size":610,"mtime":1609767019412,"results":"25","hashOfConfig":"18"},{"size":683,"mtime":1609646095169,"results":"26","hashOfConfig":"18"},{"size":2766,"mtime":1609768778425,"results":"27","hashOfConfig":"18"},{"size":1625,"mtime":1609947499838,"results":"28","hashOfConfig":"18"},{"size":3334,"mtime":1609945186515,"results":"29","hashOfConfig":"18"},{"size":284,"mtime":1609845868461,"results":"30","hashOfConfig":"18"},{"size":424,"mtime":1609845613929,"results":"31","hashOfConfig":"18"},{"size":1730,"mtime":1609944979357,"results":"32","hashOfConfig":"18"},{"size":323,"mtime":1609863211103,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"14c9oag",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"E:\\workspace\\react-admin\\src\\index.js",[],["74","75"],"E:\\workspace\\react-admin\\src\\App.js",[],"E:\\workspace\\react-admin\\src\\pages\\About\\index.js",[],["76","77"],"E:\\workspace\\react-admin\\src\\pages\\Home\\index.js",["78"],"import React, {Component} from 'react';\r\nimport './index.scss'\r\nimport { Button } from \"antd\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <a>home</a>\r\n        <Button type=\"primary\">按钮</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","E:\\workspace\\react-admin\\src\\pages\\Login\\index.js",["79"],"import react, { Component } from \"react\";\r\nimport \"./index.scss\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            formType: 'login'\r\n        };\r\n    }\r\n\r\n    toggleForm = (type) => {\r\n        this.setState({\r\n            formType: type\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-wrap\">\r\n                <div>\r\n                    { \r\n                        this.state.formType === 'login' \r\n                        ? <LoginForm toggleForm={ this.toggleForm } /> \r\n                        : <RegisterForm toggleForm={ this.toggleForm } /> \r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    } \r\n\r\n}\r\n\r\nexport default Login;","E:\\workspace\\react-admin\\src\\pages\\Login\\LoginForm.js",["80","81"],"import react, { Component, Fragment } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport { MailOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { Login } from \"../../api/account\";\r\nimport Code from \"../../components/code\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { setToken } from \"../../utils/session\"\r\n\r\nclass LoginForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading: false,\r\n            loginLoading: false,\r\n            buttonDisabled: false,\r\n            codeText: '获取验证码',\r\n            username: '',\r\n            module: 'login'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 登录\r\n     * @param {*} values \r\n     */\r\n    onFinish = (values) => {\r\n        this.setState({\r\n            loginLoading: true\r\n        });\r\n        values.password = CryptoJS.MD5(values.password).toString();\r\n        Login(values).then(response => {\r\n            if(response.data.resCode == 0) {\r\n                this.setState({\r\n                    loginLoading: false\r\n                });\r\n                setToken(response.data.data.token);\r\n                this.props.history.push(\"/index\");\r\n            }\r\n        }).catch(error => {\r\n            this.setState({\r\n                loginLoading: false\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 输入change事件\r\n     * @param {*} e \r\n     */\r\n    inputChange = (e) => {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }   \r\n\r\n    toggleForm = ()=> {\r\n        this.props.toggleForm('register');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"form-header\">\r\n                    <h4>登录</h4>\r\n                    <span onClick={this.toggleForm}>注册账号</span>\r\n                </div>\r\n                <div className=\"form-content\">\r\n                <Form\r\n                    name=\"normal_login\"\r\n                    className=\"login-form\"\r\n                    initialValues={{\r\n                        remember: true,\r\n                    }}\r\n                    onFinish={this.onFinish}\r\n                >\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        rules={[\r\n                            { required: true, message: '请输入用户名!', }, \r\n                            { type: 'email', message: '请输入正确的邮箱!',},\r\n                        ]}\r\n                    >\r\n                        <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} onChange={this.inputChange} placeholder=\"邮箱\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: '请输入密码!', },]}\r\n                    >\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"密码\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"code\"\r\n                        rules={\r\n                            [\r\n                                { required: true, message: '请输入验证码!'},\r\n                            ]\r\n                        }\r\n                    >\r\n                        <Row gutter={6}>\r\n                            <Col span={16}>\r\n                                <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"验证码\" />\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Code username={ this.state.username } module={this.state.module} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={this.state.loginLoading} className=\"login-form-button\" block>登录</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    } \r\n\r\n}\r\n\r\nexport default withRouter(LoginForm);","E:\\workspace\\react-admin\\src\\pages\\Login\\RegisterForm.js",["82","83"],"import react, { Component, Fragment } from \"react\";\r\nimport { Form, Input, Button, Row, Col, message } from 'antd';\r\nimport { MailOutlined, LockOutlined } from '@ant-design/icons';\r\nimport Code from \"../../components/code\";\r\nimport { Register } from \"../../api/account\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nclass RegisterForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: '',\r\n            module: 'register'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 注册\r\n     * @param {*} values \r\n     */\r\n    onFinish = (values) => {\r\n        values.password = CryptoJS.MD5(values.password).toString();\r\n        Register(values).then(response => {\r\n            message.success(response.data.message);\r\n            if(response.data.resCode == 0) {\r\n                this.toggleForm();\r\n            }\r\n        }).catch(error => {\r\n            message.error(error.data.message);\r\n        });\r\n    }\r\n\r\n     /**\r\n     * 输入change事件\r\n     * @param {*} e \r\n     */\r\n    inputChange = (e) => {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    } \r\n\r\n    toggleForm = ()=> {\r\n        this.props.toggleForm('login');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"form-header\">\r\n                    <h4>注册</h4>\r\n                    <span onClick={ this.toggleForm }>登录</span>\r\n                </div>\r\n                <div className=\"form-content\">\r\n                <Form\r\n                    name=\"normal_login\"\r\n                    className=\"login-form\"\r\n                    initialValues={{\r\n                        remember: true,\r\n                    }}\r\n                    onFinish={this.onFinish}\r\n                >\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        rules={[\r\n                            { required: true, message: '请输入邮箱!', }, \r\n                            { type: 'email', message: '请输入正确的邮箱!',},\r\n                    ]}\r\n                    >\r\n                        <Input onChange={this.inputChange} prefix={<MailOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入邮箱\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: '请输入密码!', },]}\r\n                    >\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"请输入密码\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"repassword\"\r\n                        rules={\r\n                            [\r\n                                { required: true, message: '请输入密码!'},\r\n                                ({ getFieldValue }) => ({\r\n                                    validator(rule, value) {\r\n                                      if (!value || getFieldValue('password') === value) {\r\n                                        return Promise.resolve();\r\n                                      }\r\n                        \r\n                                      return Promise.reject('两次密码不一致!');\r\n                                    },\r\n                                  }),\r\n                            ]\r\n                        }\r\n                    >\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"请再次输入密码\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"code\"\r\n                        rules={\r\n                            [\r\n                                { required: true, message: '请输入验证码!'},\r\n                            ]\r\n                        }\r\n                    >\r\n                        <Row gutter={6}>\r\n                            <Col span={16}>\r\n                                <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入验证码\" />\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Code username={ this.state.username } module={this.state.module} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" block>注册</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    } \r\n\r\n}\r\n\r\nexport default RegisterForm;","E:\\workspace\\react-admin\\src\\api\\account.js",[],"E:\\workspace\\react-admin\\src\\utils\\request.js",[],"E:\\workspace\\react-admin\\src\\components\\code\\index.js",["84","85"],"import react, { Component } from \"react\";\r\nimport { Button, message } from 'antd';\r\nimport { GetSms } from \"../../api/account\";\r\n\r\n//定时器\r\nlet timer = null;\r\n\r\n//Class组件\r\nclass Code extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            buttonDisabled: false,\r\n            codeText: '获取验证码',\r\n            username: '',\r\n            module: props.module\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 将要接受父组件传来的props\r\n     * @param {*} param\r\n     */\r\n    componentWillReceiveProps({ username }) {\r\n        this.setState({ username })\r\n    }\r\n\r\n    /**\r\n     * 组件销毁前处理事件\r\n     */\r\n    componentWillUnmount() {\r\n        //清除定时器\r\n        clearInterval(timer);\r\n    }\r\n\r\n     /**\r\n     * 倒计时\r\n     */\r\n    countDowm = () => {\r\n        let second = 60;\r\n\r\n        this.setState({\r\n            loading: false,\r\n            buttonDisabled: true,\r\n            codeText: `${second}S`,\r\n        })\r\n\r\n        timer = setInterval(()=>{\r\n            second--;\r\n\r\n            if(second <= 0) {\r\n                this.setState({\r\n                    buttonDisabled: false,\r\n                    codeText: '重新获取',\r\n                });\r\n                clearInterval(timer);\r\n                return false;\r\n            }\r\n\r\n            this.setState({\r\n                buttonDisabled: true,\r\n                codeText: `${second}S`,\r\n            })\r\n        }, 1000);\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取验证码\r\n     */\r\n    getCode =() => {\r\n        let username = this.state.username;\r\n        if(!username) {\r\n            message.warning('请输入用户名', 1);\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            loading: true,\r\n            codeText: '发送中'\r\n        });\r\n\r\n        let params = {\r\n            username,\r\n            module: this.state.module\r\n        };\r\n\r\n        GetSms(params).then(response => {\r\n            if(response.data.resCode == 0) {\r\n                message.success(response.data.message);\r\n                this.countDowm();\r\n            } else {\r\n                this.setState({\r\n                    loading: false,\r\n                    buttonDisabled: false,\r\n                    codeText: '重新获取'\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            this.setState({\r\n                loading: false,\r\n                buttonDisabled: false,\r\n                codeText: '重新获取'\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return <Button type=\"danger\" disabled={this.state.buttonDisabled} loading={this.state.loading} onClick={this.getCode} block>{this.state.codeText}</Button>\r\n    }\r\n\r\n}\r\n\r\nexport default Code;","E:\\workspace\\react-admin\\src\\pages\\Index\\index.js",[],"E:\\workspace\\react-admin\\src\\pages\\Index\\components\\Aside.js",["86"],"import React, { Component, Fragment } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Menu } from 'antd';\r\nimport \"./Aside.scss\";\r\n\r\nimport Router from \"../../../router\";\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nclass Aside extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            openKeys: [], //当前展开的 SubMenu 菜单项 key 数组\r\n            selectedKeys: []  //当前选中的菜单项 key 数组\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 组件渲染后执行\r\n     */\r\n    componentDidMount() {\r\n        //获取路由\r\n        var pathname = this.props.location.pathname;\r\n        //获取当前所在的目录层级\r\n        const rank = pathname.split('/')\r\n        //rank = [\"\",\"policy-engine\",\"nas-client\"]\r\n        switch (rank.length) {\r\n            case 2:  //一级目录\r\n                this.setState({\r\n                    selectedKeys: [pathname]\r\n                })\r\n                break;\r\n            case 3: //二级目录，要展开一个subMenu\r\n                this.setState({\r\n                    selectedKeys: [pathname],\r\n                    openKeys: [rank.slice(0, 2).join('/')]\r\n                })\r\n                break;\r\n            case 4: //三级目录，要展开两个subMenu\r\n                this.setState({\r\n                    selectedKeys: [pathname],\r\n                    openKeys: [rank.slice(0, 2).join('/'), rank.slice(0, 3).join('/')]\r\n                })\r\n                break; \r\n        \r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染Menu\r\n     */\r\n    renderMenu = ({title, key, path}) => {\r\n        return <Menu.Item key={ key }> <Link to={ path }>{ title }</Link></Menu.Item>\r\n    }\r\n\r\n    /**\r\n     * 渲染SubMenu\r\n     */\r\n    renderSubMenu = ({title, key, children}) => {\r\n        return (\r\n            <SubMenu key={ key } title={ title }>\r\n                {\r\n                   children && children.map(item => {\r\n                        return item.children && item.children.length > 0 ? this.renderSubMenu(item) : this.renderMenu(item);\r\n                   })\r\n                }\r\n            </SubMenu>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 点击 MenuItem\r\n     * @param {*} param0 \r\n     */\r\n    onMenuSelect = ({ item, key, keyPath, domEvent }) => {\r\n        this.setState({\r\n            selectedKeys: [key],\r\n            openKeys: [keyPath[keyPath.length -1]] //获取最后一项\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 展开/关闭 触发\r\n     */\r\n    onOpenChange = (openKeys) => {\r\n        this.setState({openKeys})\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Fragment>\r\n                <div className=\"logo\" />\r\n                <Menu theme=\"dark\" \r\n                    onOpenChange={this.onOpenChange}\r\n                    onClick={this.onMenuSelect}\r\n                    selectedKeys={ this.state.selectedKeys } \r\n                    openKeys={ this.state.openKeys }\r\n                    mode=\"inline\"\r\n                >\r\n                   {\r\n                       Router && Router.map(item => {\r\n                            return item.children && item.children.length > 0 ? this.renderSubMenu(item) : this.renderMenu(item);\r\n                       })\r\n                   }\r\n                </Menu>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(Aside);","E:\\workspace\\react-admin\\src\\utils\\session.js",[],"E:\\workspace\\react-admin\\src\\components\\SecurityRouter\\index.js",[],"E:\\workspace\\react-admin\\src\\router\\index.js",[],"E:\\workspace\\react-admin\\src\\pages\\Index\\components\\Content.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"87","replacedBy":"91"},{"ruleId":"89","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":14,"column":9,"nodeType":"95","endLine":14,"endColumn":12},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":13},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":33,"column":38,"nodeType":"102","messageId":"103","endLine":33,"endColumn":40},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":25,"column":38,"nodeType":"102","messageId":"103","endLine":25,"endColumn":40},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":90,"column":38,"nodeType":"102","messageId":"103","endLine":90,"endColumn":40},{"ruleId":"104","severity":1,"message":"105","line":28,"column":9,"nodeType":"106","messageId":"107","endLine":47,"endColumn":10},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],["108"],["109"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]